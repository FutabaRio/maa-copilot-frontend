import { writeFile } from 'fs'
import { uniq } from 'lodash-es'
import fetch from 'node-fetch'
import pinyin from 'pinyin'
import process from 'process'
import { promisify } from 'util'

const writeFileAsync = promisify(writeFile)

const CHARACTER_TABLE_JSON_URL =
  'https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/zh_CN/gamedata/excel/character_table.json'

function transformOperatorName(name: string) {
  const fullPinyin = pinyin(name, {
    segment: true,
    style: pinyin.STYLE_NORMAL,
  })
  const partialPinyin = pinyin(name, {
    segment: true,
    style: pinyin.STYLE_FIRST_LETTER,
  })
  return {
    name,
    pron: [
      fullPinyin.flatMap((el) => el).join(''),
      partialPinyin.flatMap((el) => el).join(''),
    ].join(' '),
  }
}

async function getOperatorNames() {
  const resp = (await fetch(CHARACTER_TABLE_JSON_URL).then((res) =>
    res.json(),
  )) as any
  const ids = Object.keys(resp)
  return uniq(
    ids.flatMap((el) => {
      const op = resp[el]
      if (['TOKEN', 'TRAP'].includes(op.profession)) return []
      return [op.name]
    }),
  )
    .map((el) => transformOperatorName(el))
    .sort((a, b) => {
      return pinyin.compare(a.name, b.name)
    })
}

function withGeneratedHeader(content: string) {
  return `// Generated by update-operators.ts\n// DO NOT EDIT\n\n${content}`
}

async function main() {
  console.info('Fetching character_table.json...')
  const names = await getOperatorNames()

  console.info('Parsing character_table.json...')
  const content = withGeneratedHeader(
    `export const OPERATORS = ${JSON.stringify(names)};`,
  )

  console.info('Writing to operators.ts...')
  await writeFileAsync('src/models/generated/operators.ts', content)
}

main()
  .then(() => {
    process.exit(0)
  })
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
