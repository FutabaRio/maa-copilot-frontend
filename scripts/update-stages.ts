import { writeFile } from 'fs'
import { uniq } from 'lodash-es'
import fetch from 'node-fetch'
import pinyin from 'pinyin'
import process from 'process'
import { promisify } from 'util'

const writeFileAsync = promisify(writeFile)

const STAGE_TABLE_JSON_URL =
  'https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/zh_CN/gamedata/excel/stage_table.json'

async function getStages() {
  const resp = (await fetch(STAGE_TABLE_JSON_URL).then((res) =>
    res.json(),
  )) as any
  const stages = Object.values(resp['stages'])
  const stagesUniqueByLevelId = [
    ...new Map(stages.map((stage: any) => [stage['levelId'], stage])).values(),
  ]
  return stagesUniqueByLevelId
    .filter((stage: any) => {
      return !stage.isStoryOnly
    })
    .map((stage: any) => {
      return {
        name: stage.name,
        code: stage.code,
        levelId: stage.levelId.toLowerCase(),
      }
    })
}

function withGeneratedHeader(content: string) {
  return `// Generated by update-stages.ts\n// DO NOT EDIT\n\n${content}`
}

async function main() {
  console.info('Fetching stage_table.json...')
  const stages = await getStages()

  console.info('Parsing stage_table.json...')
  const content = withGeneratedHeader(
    `export const STAGES = ${JSON.stringify(stages)};`,
  )

  console.info('Writing to stages.ts...')
  await writeFileAsync('src/models/generated/stages.ts', content)
}

main()
  .then(() => {
    process.exit(0)
  })
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
